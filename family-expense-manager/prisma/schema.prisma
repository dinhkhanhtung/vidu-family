// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and profile management
model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  hashedPassword  String?
  emailVerified   DateTime?
  image           String?
  role            Role      @default(USER)
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Auth-related fields
  accounts        Account[]
  sessions        Session[]
  
  // Business-related fields
  transactions    Transaction[]
  budgets         Budget[]
  savingsGoals    SavingsGoal[]
  subscriptions   Subscription[]
  notifications   Notification[]
  
  @@map("users")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Core business models
model Transaction {
  id          String   @id @default(cuid())
  amount      Float
  type        TransactionType
  category    String
  description String?
  date        DateTime
  userId      String
  budgetId    String?
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  budget      Budget?  @relation(fields: [budgetId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("transactions")
}

model Budget {
  id          String   @id @default(cuid())
  name        String
  amount      Float
  period      Period
  category    String
  userId      String
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("budgets")
}

model SavingsGoal {
  id          String   @id @default(cuid())
  name        String
  targetAmount Float
  currentAmount Float  @default(0)
  deadline    DateTime?
  category    String
  userId      String
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("savings_goals")
}

model Subscription {
  id            String   @id @default(cuid())
  userId        String
  planId        String
  status        SubscriptionStatus
  startDate     DateTime
  endDate       DateTime?
  cancelledAt   DateTime?
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("subscriptions")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  read        Boolean  @default(false)
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("notifications")
}

// Enums
enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum Period {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PENDING
}

enum NotificationType {
  SYSTEM
  BUDGET_ALERT
  GOAL_ACHIEVED
  PAYMENT_DUE
  SUBSCRIPTION
}